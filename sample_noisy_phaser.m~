% simulate multiple times with noise to get a noisy phaser plot
clear all

Nreps = 5;

for i=1:Nreps
    sim(i) = freq_sim_noisy(i);
end

%% plot trajectory of hand and target
figure(1); clf; hold on
for i=1:Nreps
    plot(sim(i).t,sim(i).target,'y')
    plot(sim(i).t,sim(i).hand,'b','LineWidth',1);
end
%title('Simulation trajectory');
leg2 = {'Target','Hand'};
legend(leg2,'FontSize',15);
xlabel('Time','FontSize',15);
ylabel('Position','FontSize',15);
xlim([0 10]);
% legend('Target','.0001x effort','.01x','Default','100x','10000x');
% legend('Target','10 ms delay','100 ms','200 ms (default)','400 ms','600 ms');

%% plot phasors
figure

Nfreq = length(sim(1).ratio);

for i=1:Nreps
    for j=1:1:Nfreq
        ratio(i,j) = sim(i).ratio(j);

    end
end

%colmap = [linspace(
ji = [];
for j=1:5:Nfreq
    plot(ratio(:,j),'b.'); hold on;
    ji = [ji j];
end
axis equal

% estimate Gaussian distribution for real and complex parts
for i=1:length(ji)
    z(1,:,i) = real(ratio(:,ji(i)));
    z(2,:,i) = imag(ratio(:,ji(i)));
    
    % get mean
    z_mean(:,i) = mean(z(:,:,i)')';
    plot(z_mean(1,i),z_mean(2,i),'ro')
    
    % get covariance matrix
    zN(:,:,i) = z(:,:,i)-repmat(z_mean(:,i),1,Nreps);
    Sigma(:,:,i) = zN(:,:,i)*zN(:,:,i)'/Nreps;
    
    
end





%polarplot(data.rot.avg.x_x.fft(1,:),'-o','LineWidth',1.5);
% polarplot(data.rot.avg.x_x.fft(2,:),'-o','LineWidth',1.5);
% polarplot(data.rot.avg.x_x.fft(5,:),'-o','LineWidth',1.5);


% legend('Inf Horizon','X -> X data','Y -> Y data');
% legend('.0001x effort','.01x','Default','100x','10000x','X -> X data','Y -> Y data');
% legend('10 ms delay','100 ms','200 ms (default)','400 ms','600 ms','X -> X data','Y -> Y data');